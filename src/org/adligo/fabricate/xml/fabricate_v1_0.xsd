<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
	targetNamespace="http://www.adligo.org/fabricate/xml/io_v1/fabricate_v1_0.xsd" 
	xmlns:fns="http://www.adligo.org/fabricate/xml/io_v1/fabricate_v1_0.xsd" 
	elementFormDefault="qualified"
	xmlns:lns="http://www.adligo.org/fabricate/xml/io_v1/library_v1_0.xsd"
	xmlns:pns="http://www.adligo.org/fabricate/xml/io_v1/project_v1_0.xsd"
	xmlns:cns="http://www.adligo.org/fabricate/xml/io_v1/common_v1_0.xsd" >
	
	<!-- 
	Comments on name space;
	The last part of the name space here should match up with the file names for the schemas (.xsd) files.
	Also the parent name space should match for all schemas in this directory, since they reference
	each other in a flat way (all files in a single directory). The idea here being that on the actual web 
	server these urls would be as close to they are in the .jar file, and that 
	http://www.adligo.org/fabricate/xml/io_v1/library_v1_0
	would serve up library_v1_0.xsd.
	In addition new versions could be mixed in i.e. library_v1_1.xsd, once v2_0 is started 
	it would have a io_v2/
	
	Fabricate could also potentially work from xml files 
	which schemas written in different languages. This would
	add quite a lot of complexity to Fabricate if this is every
	attempted the work path would be;
	1) Create a new plug in project for each language.
	2) Use a namespace like the following for the root namespace;
		http://www.adligo.org/fabricate/xml/io_v1/fr
		http://www.adligo.org/fabricate/xml/io_v1/fr_CA
		Where the last path element is the language code or locale code.
    3) Add a conversion interface so that language implementors
    could call parse (other language) and convert 
    (output being the regular English jaxb instances).
    4) Implement the parse and convert interface
    in the language specific project.
    5) Add code to fabricate so that it would look for this
    namespace in classes like FabricateXmlDiscovery, and
    do conversions accordingly.
	 -->
    <import schemaLocation="library_v1_0.xsd" 
		namespace="http://www.adligo.org/fabricate/xml/io_v1/library_v1_0.xsd">
	</import>
	<import schemaLocation="project_v1_0.xsd" 
		namespace="http://www.adligo.org/fabricate/xml/io_v1/project_v1_0.xsd">
	</import>
	<import schemaLocation="common_v1_0.xsd" 
		namespace="http://www.adligo.org/fabricate/xml/io_v1/common_v1_0.xsd">
	</import>
	
    
    <complexType name="fabricate_type">
    	<sequence>
    		<element name="java" type="fns:java_type" minOccurs="0"
    			maxOccurs="1">
    		</element>
    		<element name="logs" type="fns:log_settings_type"
    			minOccurs="0" maxOccurs="1">
    		</element>
    		<element name="dependencies"
    			type="fns:fabricate_dependencies" minOccurs="1" maxOccurs="1">
    		</element>
            <element name="trait" type="cns:routine_parent_type" minOccurs="0" maxOccurs="unbounded">
            	<annotation>
            		<documentation>Traits provide reusable code between commands and stages,
they were originally added as a way to encrypt and decrypt
keystore passwords for git.  Fabricate includes these 
default traits (encrypt and decrypt), but they may be replaced 
by specifying a trait node with a identical name.</documentation>
            	</annotation></element>
            <element name="command" type="cns:routine_parent_type"
    			minOccurs="0" maxOccurs="unbounded">
    		</element>
    		<choice>
    			<element name="groups" type="fns:project_groups_type"
    				minOccurs="0" maxOccurs="1">
    			</element>
    			<element name="project_group"
    				type="fns:stages_and_projects_type" minOccurs="0"
    				maxOccurs="1">
    			</element>
    		</choice>
    	</sequence>
    </complexType>

    <element name="fabricate" type="fns:fabricate_type"></element>

    <complexType name="project_groups_type">
        <annotation>
        	<documentation></documentation>
        </annotation>
        <sequence>
    		<element name="project_group" type="fns:project_group_type" minOccurs="1" maxOccurs="unbounded"></element>
    	</sequence>
    </complexType>

    <complexType name="git_server_type">
    	<attribute name="user" type="string" use="optional"></attribute>
    	<attribute name="hostname" type="string" use="required"></attribute>
    	<attribute name="path" type="string" use="required">
    		<annotation>
    			<documentation>
    				This is the remote path, and must contain a final
    				slash in the remote servers file syntax which I
    				think is always /.
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="protocol" type="string" use="optional">
    		<annotation>
    			<documentation>This defaults to ssh, but could be https.
</documentation>
    		</annotation></attribute>
    </complexType>

    <complexType name="projects_type">
    		<sequence>
    			<element name="scm" type="fns:scm_type" minOccurs="1" maxOccurs="1"></element>
    			<element name="project" type="fns:project_type" minOccurs="1" maxOccurs="unbounded"></element>
    		</sequence>
    	
    </complexType>


    
    <complexType name="project_type">
    	<attribute name="name" type="string" use="required">
    		<annotation>
				<documentation>
					This is the name of the project in the scm i.e.;
					fabricate.adligo.org
				</documentation>
			</annotation>
    	</attribute>
    	<attribute name="version" type="string" use="optional">
    		<annotation>
				<documentation>
					This is the optional version in the scm (aka tag in git).
				</documentation>
			</annotation>
    	</attribute>
    </complexType>

    <complexType name="fabricate_dependencies">
    	<annotation>
    		<documentation>
    			Fabricate extensions can delivered through a repository
    			download, and added to the fabricate classpath for the
    			main fab. In addition they can be added to the
    			project_group/lib directory.
    		</documentation>
    	</annotation>
    	<sequence>
    		<element name="remote_repository" minOccurs="1"
    			maxOccurs="unbounded">
    			<annotation>
    				<documentation>
    					The repositories listed with these elements are
    					maven servers used to find a particular
    					artifact. This is just like
    					distributionManagement in the maven document.
    					Fabricate currently only supports the default
    					layout. This is the url to the repository folder
    					ie;
    					http://docs.codehaus.org/display/MAVENUSER/Mirrors+Repositories
    					http://repo1.maven.org/maven2/
    					http://uk.maven.org/maven2/
    					http://mirrors.ibiblio.org/maven2/ only http is
    					available.
    				</documentation>
    			</annotation>
    			<simpleType>
    				<restriction base="token">
    					<minLength value="3"></minLength>
    				</restriction>
    			</simpleType>
    		</element>
    		<element name="library" type="lns:library_reference_type" minOccurs="0" maxOccurs="unbounded">
            	<annotation>
            		<documentation>Note the platform_type is always ignored in this context.</documentation>
            	</annotation></element>
            <element name="dependency" type="lns:dependency_type"
    			minOccurs="0" maxOccurs="unbounded">
    		</element>
    	</sequence>
    </complexType>

    
    

    <complexType name="java_type">
    	<annotation>
    		<documentation>
    			This provides a limited list of options to pass to the
    			jvm which actually does the fabrication. These options
    			are peers of options listed here
    			http://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html
    		</documentation>
    	</annotation>
    	<attribute name="Xmx" type="string">
    		<annotation>
    			<documentation>Defaults to 64m</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="Xms" type="string">
    		<annotation>
    			<documentation>Defaults to 16m</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="threads" type="int">
    		<annotation>
    			<documentation>
    			This optional attribute allows you to turn down or 
    			off the concurrency feature of fabricate it 
    			defaults to two times Runtime.getRuntime().availableProcessors()
    			</documentation>
    		</annotation>
    	</attribute>
    </complexType>

    <complexType name="log_setting_type">
    	<attribute name="class" type="string"></attribute>
    	<attribute name="setting" type="boolean"></attribute>
    </complexType>

    <complexType name="log_settings_type">
    	<sequence>
    		<element name="log" type="fns:log_setting_type" minOccurs="0" maxOccurs="unbounded"></element>
    	</sequence>
    </complexType>

    

    <complexType name="project_group_type">
        <annotation>
        	<documentation>
Project groups are projects with fabricate.xml files, 
fabricate will be able to delegate to other fabrications.</documentation>
        </annotation>
        <sequence>
    		<element name="scm" type="fns:scm_type" minOccurs="1"
    			maxOccurs="1">
    		</element>
    		<element name="project" type="fns:project_type" minOccurs="1" maxOccurs="1"></element>
    	</sequence>
    </complexType>

    
  

	<complexType name="scm_type">
    
    	<choice>
    		<element name="git" type="fns:git_server_type" minOccurs="1"
    			maxOccurs="1">
    		</element>
    	</choice>
    	
    </complexType>

    
	<complexType name="stage_type">
        <annotation>
        	<documentation>
Fabricate stages are templates that may be applied to projects
if the project has a stage with a matching stage name.   By default
all tasks for a stage are executed on the project, however 
if a task is optional, then the project must have the task node
under the stage with matching respective names
in order for the task to be executed on the project.</documentation>
        </annotation>
        <sequence>
    		<element name="params" type="cns:params_type" minOccurs="0" maxOccurs="1"></element>
    		<element name="task" type="cns:routine_type" minOccurs="0" maxOccurs="unbounded"></element>
    	</sequence>
    	<attribute name="name" use="required">
    		<simpleType>
    			<restriction base="normalizedString">
    				<whiteSpace value="collapse"></whiteSpace>
    				<minLength value="3"></minLength>
    			</restriction>
    		</simpleType>
	   </attribute>
    	<attribute name="class" use="optional">
    		<annotation>
    			<documentation>
    				This is a class in the fabricate classpath which
    				must implement one of;
    				org.adligo.fabricate.common.I_ScmTask
    				org.adligo.fabricate.common.I_ProjectTask
    			</documentation>
    		</annotation>
    		<simpleType>
    			<restriction base="normalizedString">
    				<whiteSpace value="collapse"></whiteSpace>
    				<minLength value="3"></minLength>
    			</restriction>
    		</simpleType>
    	</attribute>
    	<attribute name="optional" type="boolean">
    		<annotation>
    			<documentation>
    				When this is set to true, the task/stage name must
    				be included on the command line for the stage to execute. 
    				In Example;
    				stages=foo,bar
					This was originally done so that external users of the build do not need
    				to push to a intelligence4j server.
    			</documentation>
    		</annotation>
    	</attribute>
    </complexType>
    
    <complexType name="stages_and_projects_type">
    	<sequence>
    		<element name="stages" type="fns:stages_type" minOccurs="1" maxOccurs="1"></element>
    		<element name="projects" type="fns:projects_type" minOccurs="1" maxOccurs="1"></element>
    	</sequence>
    </complexType>
    
    <complexType name="stages_type">
    	<sequence>
    		<element name="stage" type="fns:stage_type" minOccurs="1" maxOccurs="unbounded"></element>
    	</sequence>
    </complexType>


</schema>