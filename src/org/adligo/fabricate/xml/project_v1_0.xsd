<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
	targetNamespace="http://www.adligo.org/fabricate/xml/io_v1/project_v1_0.xsd" 
	xmlns:pns="http://www.adligo.org/fabricate/xml/io_v1/project_v1_0.xsd" 
	elementFormDefault="qualified"
	xmlns:lns="http://www.adligo.org/fabricate/xml/io_v1/library_v1_0.xsd"
	xmlns:cns="http://www.adligo.org/fabricate/xml/io_v1/common_v1_0.xsd" >
	
	<import schemaLocation="library_v1_0.xsd" 
		namespace="http://www.adligo.org/fabricate/xml/io_v1/library_v1_0.xsd">
	</import>
	<import schemaLocation="common_v1_0.xsd" 
		namespace="http://www.adligo.org/fabricate/xml/io_v1/common_v1_0.xsd">
	</import>
	
    <element name="fabricate_project" type="pns:fabricate_project_type"></element>
    
    <complexType name="fabricate_project_type">
    	<sequence>
            <element name="attributes" type="cns:params_type" minOccurs="0" maxOccurs="1">
            	<annotation>
            		<documentation>Attributes are a way to extract common values
from tasks into a spot where they don't need
to be repeated.  They were initially added for 
srcDirs, so that classpath2Eclipse and compile
could share multiple source directories. Each task
must document which attributes it pays attention to.</documentation>
            	</annotation></element>
            <element name="command" type="cns:routine_params_parent_type"
    			minOccurs="0" maxOccurs="unbounded">
                <annotation>
                	<documentation>
This command xml node allows the project
to override parameters and provide additional 
parameters for command execution. 
If the I_FabricationRoutine implements I_ParticipationAware it should check
if the corresponding stage is present here in the project.xml,
if it is it should execute.
					</documentation>
                </annotation>
            </element>
            <element name="stages" type="pns:project_stages_type" minOccurs="1" maxOccurs="1">
    		</element>
            <element name="dependencies" type="pns:project_dependencies_type"
    			minOccurs="0" maxOccurs="1">
    		</element>
    	</sequence>
    	<!--  note there is no name attribute, as it is always the same as the 
    	project directory name -->
    </complexType>

    <complexType name="project_stages_type">
    	<sequence minOccurs="1" maxOccurs="unbounded">
    		<element name="stage" type="cns:routine_params_parent_type" minOccurs="1" maxOccurs="unbounded">
	    		<annotation>
					<documentation>
						Each stage is called by main fabricate run (fabricate.xml), 
						if the I_FabricationRoutine implements I_ParticipationAware it should check
						if the corresponding stage is present here in the project.xml,
						if it is it should execute.
					</documentation>
				</annotation>
			</element>
    	</sequence>
    </complexType>



	<complexType name="project_dependency_type">
    	<annotation>
    		<documentation>
    			This is a name of a project directory, the actual
    			artifact ie (jar, war exc) is determined based on the
    			context of the task running on the project for a
    			particular stage. In other words there could be three
    			jar files which are produced for a project (a gwt jar,
    			jse jar and jme jar) so the artifact for a jme_jar task
    			would be the jme jar.
    		</documentation>
    	</annotation>
    	<simpleContent>
    		<extension base="string">
    			<attribute name="platform" type="lns:platform_type" use="optional"></attribute>
    		</extension>
    	</simpleContent>
    </complexType>

	<complexType name="project_dependencies_type">
		<complexContent>
			<extension base="lns:dependencies_type">
				<sequence>
					<element name="project" type="pns:project_dependency_type" minOccurs="0" maxOccurs="unbounded"></element>
				</sequence>
			</extension>
		</complexContent>

	</complexType>
</schema>