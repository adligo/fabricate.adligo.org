<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
	targetNamespace="http://www.adligo.org/fabricate/xml/io_v1/result_v1_0.xsd" 
	xmlns:tns="http://www.adligo.org/fabricate/xml/io_v1/result_v1_0.xsd" 
	elementFormDefault="qualified">


    <complexType name="result_type">
    	<sequence>
    		<element name="machine" type="tns:machine_info_type"
    			minOccurs="1" maxOccurs="1">
    		</element>
            <element name="tests" type="tns:tests_type" minOccurs="0" maxOccurs="1"></element>
            <element name="failure" type="tns:failure_type"
    			minOccurs="0" maxOccurs="1">
    			<annotation>
    				<documentation>
    					Note CDATA text inside of the failure can
    					contain stack traces, and any other failure
    					information.
    				</documentation>
    			</annotation>
    		</element>
    	</sequence>
    	<attribute name="name" type="string">
    		<annotation>
    			<documentation>
    				This the name of the project_group.
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="successful" type="boolean">
    		<annotation>
    			<documentation>
    				True when the fabrication was successful with no
    				issues.
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="duration" type="duration">
    		<annotation>
    			<documentation>
    				The length of time fabricate ran.
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="os" type="string">
    		<annotation>
    			<documentation>
    				The operating system where fabricate ran, it should
    				be a simple name like; mac, linux, windows exc
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="os_version" type="string">
    		<annotation>
    			<documentation>
    				The version of the operating system/kernel ie 10.10,
    				8, 3.4 exc
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="command_line" type="string">
    		<annotation>
    			<documentation>
This should contain the original command line command used to start Fabricate.
In Example;
fab cmd=encrypt
</documentation>
    		</annotation></attribute>
    </complexType>

    <complexType name="machine_info_type">
    	<attribute name="hostname" type="string">
    		<annotation>
    			<documentation>The machines hostname.</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="cpu_name" type="string">
    		<annotation>
    			<documentation>
    				The cpu name ie; Intel(R) Core(TM) i7-4930K CPU @
    				3.40GHz
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="cpu_speed" type="string">
    		<annotation>
    			<documentation>
    				The parseable cpu speed ie; 3.40GHz
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="ram" type="string">
    		<annotation>
    			<documentation>
    				The amount of memory allocated to the JVM which ran
    				fabricate (aka -Xmx)
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="processors" type="int">
    		<annotation>
    			<documentation>
    				The result of
    				Runtime.getRuntime().availableProcessors()
    			</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="java_version" type="string"></attribute>
    </complexType>

    <complexType name="failure_type">
        <annotation>
        	<documentation>A failure is a indication something catastrophic failed (not including test failures).</documentation>
        </annotation>
        <sequence>
    		<element name="detail" type="string"></element>
    	</sequence>
    	<attribute name="command" type="string" use="optional"></attribute>
    	<attribute name="stage" type="string" use="optional">
    		<annotation>
    			<documentation>The stage which failed.</documentation>
    		</annotation>
    	</attribute>
        <attribute name="stage_type" type="string" use="optional"></attribute>
        <attribute name="project" type="string" use="optional">
    		<annotation>
    			<documentation>The project which failed.</documentation>
    		</annotation>
    	</attribute>
    	<attribute name="task" type="string" use="optional"></attribute>
    </complexType>

    <element name="result" type="tns:result_type"></element>

    <complexType name="tests_type">
    	<sequence>
    		<element name="coverage" type="tns:coverage_type"
    			minOccurs="0" maxOccurs="1">
    		</element>
    	</sequence>
    	<attribute name="count" type="unsignedLong" use="required">
    		<annotation>
    			<documentation>The total number of tests (may include ignored tests, or other tests which didn't pass or fail).</documentation>
    		</annotation></attribute>
    	<attribute name="passed" type="unsignedLong" use="required">
    		<annotation>
    			<documentation>The number of tests that passed.</documentation>
    		</annotation></attribute>
    	<attribute name="failed" type="unsignedLong" use="required">
    		<annotation>
    			<documentation>The number of tests that failed.</documentation>
    		</annotation></attribute>
    </complexType>

    <complexType name="coverage_type">
        <annotation>
        	<documentation>The tests_type represents tests in the abstract sense so that 
any testing tool can be bolted to the node.  For junit
tests or tests4j tests the count and passed would represent
the respective @Test count and number passed.
   For tools that track code coverage (like tests4j with tests4j_4jacoco)
a optional coverage node can be added to track aggregate code coverage.
 </documentation>
        </annotation>
        <attribute name="units" type="unsignedLong" use="required"></attribute>
    	<attribute name="covered_units" type="unsignedLong" use="required"></attribute>
    </complexType>
</schema>